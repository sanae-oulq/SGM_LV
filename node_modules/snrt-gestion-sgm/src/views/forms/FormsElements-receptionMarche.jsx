import React, { useState, useEffect } from 'react';
import { Row, Col, Card, Form, Button, InputGroup, Modal, DropdownButton, Dropdown, Tabs, Tab, Table } from 'react-bootstrap';
import { FaTrash, FaArrowLeft, FaPlus, FaSave, FaPrint, FaFileAlt, FaSearch, FaCalendarAlt, FaStore, FaShoppingBag, FaUser, FaFileUpload, FaSignature, FaFile, FaDownload, FaClipboardList, FaTag, FaBoxOpen, FaEye, FaTimes, FaCheck, FaHistory, FaInfoCircle, FaUserTie } from 'react-icons/fa';
import './GEDStyles.css';
import axios from 'axios';

const FormsElements = () => {
  const [showPrintModal, setShowPrintModal] = useState(false);
  const [showGED, setShowGED] = useState(false);
  const [showForm, setShowForm] = useState(true);
  const [fileListDocuments, setFileListDocuments] = useState([]);
  const [selectedFileDocuments, setSelectedFileDocuments] = useState(null);
  const [fileListBRI, setFileListBRI] = useState([]);
  const [selectedFileBRI, setSelectedFileBRI] = useState(null);
  const [showSignatureModal, setShowSignatureModal] = useState(false);
  const [signatureTitle, setSignatureTitle] = useState('');
  const [signatureExtension, setSignatureExtension] = useState('');
  const [showPopup, setShowPopup] = useState(false);
  const [filterText, setFilterText] = useState('');
  const [selectedMarketId, setSelectedMarketId] = useState('');
  const [selectedMarketDescription, setSelectedMarketDescription] = useState('');
  const [selectedMarketDate, setSelectedMarketDate] = useState(new Date().toISOString().split('T')[0]);
  const [selectedMarketSupplier, setSelectedMarketSupplier] = useState('');
  const [showDepotPopup, setShowDepotPopup] = useState(false);
  const [depotFilterText, setDepotFilterText] = useState('');
  const [selectedCode, setSelectedCode] = useState('');
  const [showReferencePopup, setShowReferencePopup] = useState(false);
  const [referenceFilterText, setReferenceFilterText] = useState('');
  const [selectedReference, setSelectedReference] = useState('');
  const [selectedNPrix, setSelectedNPrix] = useState('');
  const [selectedDesignation, setSelectedDesignation] = useState('');
  const [numeroPrix, setNumeroPrix] = useState('');
  const [generatedNumber, setGeneratedNumber] = useState('');
  const [showValidationModal, setShowValidationModal] = useState(false);
  const [validationMessage, setValidationMessage] = useState('');
  const [filteredReferenceData, setFilteredReferenceData] = useState([]);
  const [selectedQuantity, setSelectedQuantity] = useState('');
  const [showDetailTable, setShowDetailTable] = useState(false);
  const [detailTableData, setDetailTableData] = useState([]);
  const [isMarketEditable, setIsMarketEditable] = useState(true);
  const [showNewConfirmationModal, setShowNewConfirmationModal] = useState(false);
  const [editingIndex, setEditingIndex] = useState(-1);
  const [selectedMarketRow, setSelectedMarketRow] = useState(null);
  const [selectedDepotRow, setSelectedDepotRow] = useState(null);
  const [selectedReferenceRow, setSelectedReferenceRow] = useState(null);
  const [selectedDetailRow, setSelectedDetailRow] = useState(null);


  const [showFournisseurPopup, setShowFournisseurPopup] = useState(false);
  const [fournisseurFilterText, setFournisseurFilterText] = useState('');
  const [selectedFournisseurCode, setSelectedFournisseurCode] = useState('');
  const [selectedFournisseurNom, setSelectedFournisseurNom] = useState('');
  const [selectedFournisseurRow, setSelectedFournisseurRow] = useState(null);

  const toggleFournisseurPopup = () => setShowFournisseurPopup(!showFournisseurPopup);

  useEffect(() => {
    const handleClickOutsideFournisseur = (event) => {
      if (showFournisseurPopup && !event.target.closest('.popup')) {
        setShowFournisseurPopup(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutsideFournisseur);
    return () => {
      document.removeEventListener('mousedown', handleClickOutsideFournisseur);
    };
  }, [showFournisseurPopup]);

  const filteredFournisseurData = [
    { codeFrs: 'F001', NomFrs: 'Fournisseur Alpha' },
    { codeFrs: 'F002', NomFrs: 'Fournisseur Beta' },
    { codeFrs: 'F003', NomFrs: 'Fournisseur Gamma' },
  ].filter(item =>
    Object.values(item).some(val =>
      String(val).toLowerCase().includes(fournisseurFilterText.toLowerCase())
    )
  );

  // Nouveaux états pour la gestion des marchés et des prix
  const [showMarchePopup, setShowMarchePopup] = useState(false);
  const [marcheFilterText, setMarcheFilterText] = useState('');
  const [selectedMarche, setSelectedMarche] = useState('');
  const [selectedMarcheDetails, setSelectedMarcheDetails] = useState(null);
  const [showPrixTable, setShowPrixTable] = useState(false);
  const [prixData, setPrixData] = useState([]);
  const [marcheData, setMarcheData] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [isMarcheDisabled, setIsMarcheDisabled] = useState(false);
  const [marcheArticlesData, setMarcheArticlesData] = useState([]);
  const [detailPrixData, setDetailPrixData] = useState([]);

  // Ajouter ces états au début du composant avec les autres états
  const [showReceptionModal, setShowReceptionModal] = useState(false);
  const [selectedPrix, setSelectedPrix] = useState(null);
  const [qteRecue, setQteRecue] = useState('');
  const [snCodeBarrePairs, setSnCodeBarrePairs] = useState([]);

  // Ajouter ces nouveaux états
  const [receptionsHistory, setReceptionsHistory] = useState([]);
  const [showInfoModal, setShowInfoModal] = useState(false);
  const [infoMessage, setInfoMessage] = useState('');

  const toggleMarchePopup = () => {
    setShowMarchePopup(!showMarchePopup);
    if (!showMarchePopup) {
      fetchMarches();
    }
  };

  const filteredMarcheData = marcheData.filter(item =>
    Object.values(item).some(val =>
      String(val).toLowerCase().includes(marcheFilterText.toLowerCase())
    )
  );

  // Fonction pour récupérer les marchés
  const fetchMarches = async () => {
    try {
      const response = await axios.get('http://localhost:5003/api/amarches');
      console.log('Données reçues de l\'API:', response.data);
      setMarcheData(response.data);
    } catch (err) {
      console.error('Erreur lors de la récupération des marchés:', err);
    }
  };

  useEffect(() => {
    fetchMarches();
  }, []);

  const handlePrint = () => {
    setShowPrintModal(true);
  };

  const confirmPrint = () => {
    setShowPrintModal(false);
    window.print();
  };

  const handleFileSelectDocuments = (e) => {
    const file = e.target.files[0];
    if (file) {
      const fileNameWithoutExtension = file.name.replace(/\.[^/.]+$/, "");
      const newFileEntry = {
        id: fileListDocuments.length + 1,
        fileName: fileNameWithoutExtension,
        date: new Date().toLocaleDateString(),
        fileData: file,
        typeFile: file.type,
        description: '',
      };
      setFileListDocuments([...fileListDocuments, newFileEntry]);
    }
  };

  const handleUploadDocuments = () => {
    if (!selectedFileDocuments) {
      alert('Veuillez sélectionner un fichier !');
      return;
    }

    const newFileEntry = {
      id: fileListDocuments.length + 1,
      fileName: selectedFileDocuments.name,
      date: new Date().toLocaleDateString(),
      fileData: selectedFileDocuments,
    };

    setFileListDocuments([...fileListDocuments, newFileEntry]);
    setSelectedFileDocuments(null);
  };

  const handleRemoveDocuments = (id) => {
    setFileListDocuments(fileListDocuments.filter((file) => file.id !== id));
  };

  const handleFileSelectBRI = (e) => {
    const file = e.target.files[0];
    if (file) {
      const fileNameWithoutExtension = file.name.replace(/\.[^/.]+$/, "");
      const newFileEntry = {
        id: fileListBRI.length + 1,
        fileName: fileNameWithoutExtension,
        date: new Date().toLocaleDateString(),
        fileData: file,
        typeFile: file.type,
        description: '',
      };
      setFileListBRI([...fileListBRI, newFileEntry]);
    }
  };

  const handleUploadBRI = () => {
    if (!selectedFileBRI) {
      alert('Veuillez sélectionner un fichier !');
      return;
    }

    const newFileEntry = {
      id: fileListBRI.length + 1,
      fileName: selectedFileBRI.name,
      date: new Date().toLocaleDateString(),
      fileData: selectedFileBRI,
    };

    setFileListBRI([...fileListBRI, newFileEntry]);
    setSelectedFileBRI(null);
  };

  const handleRemoveBRI = (id) => {
    setFileListBRI(fileListBRI.filter((file) => file.id !== id));
  };

  const handleSignature = () => {
    // Simulate signature upload
    const signatureFile = {
      id: fileListDocuments.length + 1,
      fileName: 'signature.pdf',
      date: new Date().toLocaleDateString(),
      fileData: new Blob(['Signature'], { type: 'application/pdf' }),
    };

    setFileListDocuments([...fileListDocuments, signatureFile]);
  };

  const handleChangeSignature = (e) => {
    const newSignatureFile = e.target.files[0];
    if (newSignatureFile) {
      const updatedFileList = fileListDocuments.map(file =>
        file.fileName === 'signature.pdf' ? { ...file, fileData: newSignatureFile, fileName: newSignatureFile.name } : file
      );
      setFileListDocuments(updatedFileList);
    }
  };

  const handleSignatureUpload = () => {
    if (!signatureTitle) {
      alert('Veuillez saisir le titre !');
      return;
    }

    const canvas = document.getElementById('signatureCanvas');
    canvas.toBlob((blob) => {
    const signatureFile = {
      id: fileListDocuments.length + 1,
        fileName: signatureTitle,
      date: new Date().toLocaleDateString(),
        fileData: blob,
        typeFile: 'image/png',
        description: `${signatureTitle}.png`,
    };

    setFileListDocuments([...fileListDocuments, signatureFile]);
    setShowSignatureModal(false);
    setSignatureTitle('');
    }, 'image/png');
  };

  const togglePopup = () => {
    setShowPopup(!showPopup);
  };

  const toggleDepotPopup = () => setShowDepotPopup(!showDepotPopup);

  const toggleReferencePopup = () => setShowReferencePopup(!showReferencePopup);

  const filteredData = [
    { id: 1, description: 'Project A', family: 'Family A', date: '2023-01-01', supplier: 'Supplier A', memo: 'Memo A' },
    { id: 2, description: 'Project B', family: 'Family B', date: '2023-02-01', supplier: 'Supplier B', memo: 'Memo B' },
    { id: 3, description: 'Project C', family: 'Family C', date: '2023-03-01', supplier: 'Supplier C', memo: 'Memo C' },
  ].filter(item =>
    Object.values(item).some(val =>
      String(val).toLowerCase().includes(filterText.toLowerCase())
    )
  );

  const filteredDepotData = [
    { code: 'A1', designation: 'Designation A' },
    { code: 'B2', designation: 'Designation B' },
    { code: 'C3', designation: 'Designation C' },
  ].filter(item =>
    Object.values(item).some(val =>
      String(val).toLowerCase().includes(depotFilterText.toLowerCase())
    )
  );

  const referenceData = [
    { id: 1, codeProd: 'CP1', designation: 'Designation 1', ref: 'Ref1', qteMarche: 100, qteLiv: 50, resteLiv: 50, numJonction: 'NJ1', marche: '1', nPrix: 'NP1' },
    { id: 2, codeProd: 'CP2', designation: 'Designation 2', ref: 'Ref2', qteMarche: 200, qteLiv: 100, resteLiv: 100, numJonction: 'NJ2', marche: '1', nPrix: 'NP2' },
    { id: 3, codeProd: 'CP3', designation: 'Designation 3', ref: 'Ref3', qteMarche: 300, qteLiv: 150, resteLiv: 150, numJonction: 'NJ3', marche: '2', nPrix: 'NP3' },
    { id: 4, codeProd: 'CP4', designation: 'Designation 4', ref: 'Ref4', qteMarche: 400, qteLiv: 200, resteLiv: 200, numJonction: 'NJ4', marche: '2', nPrix: 'NP4' },
    { id: 5, codeProd: 'CP5', designation: 'Designation 5', ref: 'Ref5', qteMarche: 500, qteLiv: 250, resteLiv: 250, numJonction: 'NJ5', marche: '3', nPrix: 'NP5' },
  ];

  useEffect(() => {
    const filteredData = referenceData.filter(item => {
      // D'abord, filtrer par marché
      const matchesMarket = item.marche === selectedMarketId;
      
      // Ensuite, filtrer par texte de recherche si présent
      const searchText = referenceFilterText.toLowerCase();
      const matchesSearch = searchText ? (
        item.id.toString().includes(searchText) ||
        item.codeProd.toLowerCase().includes(searchText) ||
        item.designation.toLowerCase().includes(searchText) ||
        item.ref.toLowerCase().includes(searchText) ||
        item.numJonction.toLowerCase().includes(searchText) ||
        item.nPrix.toLowerCase().includes(searchText)
      ) : true;

      // Les deux conditions doivent être vraies
      return matchesMarket && matchesSearch;
    });
    setFilteredReferenceData(filteredData);
  }, [referenceFilterText, selectedMarketId]);

  useEffect(() => {
    const canvas = document.getElementById('signatureCanvas');
    if (!canvas) return; // Ensure canvas is available
    const ctx = canvas.getContext('2d');
    let drawing = false;

    const startDrawing = () => drawing = true;
    const stopDrawing = () => drawing = false;
    const draw = (event) => {
      if (!drawing) return;
      const rect = canvas.getBoundingClientRect();
      ctx.lineWidth = 2;
      ctx.lineCap = 'round';
      ctx.strokeStyle = 'black';

      ctx.lineTo(event.clientX - rect.left, event.clientY - rect.top);
      ctx.stroke();
      ctx.beginPath();
      ctx.moveTo(event.clientX - rect.left, event.clientY - rect.top);
    };

    canvas.addEventListener('mousedown', startDrawing);
    canvas.addEventListener('mouseup', stopDrawing);
    canvas.addEventListener('mousemove', draw);

    return () => {
      canvas.removeEventListener('mousedown', startDrawing);
      canvas.removeEventListener('mouseup', stopDrawing);
      canvas.removeEventListener('mousemove', draw);
    };
  }, [showSignatureModal]); // Re-run effect when modal visibility changes

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (showDepotPopup && !event.target.closest('.popup')) {
        setShowDepotPopup(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [showDepotPopup]);

  useEffect(() => {
    const handleClickOutsideMarket = (event) => {
      if (showPopup && !event.target.closest('.popup')) {
        setShowPopup(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutsideMarket);
    return () => {
      document.removeEventListener('mousedown', handleClickOutsideMarket);
    };
  }, [showPopup]);

  useEffect(() => {
    const handleClickOutsideReference = (event) => {
      if (showReferencePopup && !event.target.closest('.popup')) {
        setShowReferencePopup(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutsideReference);
    return () => {
      document.removeEventListener('mousedown', handleClickOutsideReference);
    };
  }, [showReferencePopup]);

  useEffect(() => {
    const updatedReferenceData = referenceData.filter(item => item.marche === selectedMarketId);
    setFilteredReferenceData(updatedReferenceData);
  }, [selectedMarketId]);

  const clearDetailForm = () => {
    setNumeroPrix('');
    setSelectedReference('');
    setSelectedDesignation('');
    setSelectedQuantity('');
    // Add any other fields that need to be cleared
  };
{/*
  const handleValidate = () => {
    if (!selectedMarketId) {
      setValidationMessage('Veuillez remplir le champ Marché.');
      setShowValidationModal(true);
      return;
    }

    // Generate number first if not exists
    if (!generatedNumber) {
      const newNumber = `NUM-${Math.floor(Math.random() * 10000)}`;
      setGeneratedNumber(newNumber);
      setIsMarketEditable(false);
    }

    const detailFields = [numeroPrix, selectedReference, selectedQuantity];
    const filledFields = detailFields.filter(field => field !== '');

    // Check if any field in Div 2 is filled
    if (filledFields.length > 0) {
      if (!selectedReference) {
        setValidationMessage('Veuillez sélectionner le champ Référence.');
        setShowValidationModal(true);
        return;
      }

      if (!selectedQuantity) {
        setValidationMessage('Veuillez remplir le champ Quantité.');
        setShowValidationModal(true);
        return;
      }
    }

    // If no fields in Div 2 are filled, do not show success
    if (filledFields.length === 0) {
      setValidationMessage('Veuillez remplir les champs dans la section Détail.');
      setShowValidationModal(true);
      return;
    }

    const updatedData = {
      generatedNumber: generatedNumber || `NUM-${Math.floor(Math.random() * 10000)}`,
      selectedMarketDate,
      selectedMarketId,
      selectedMarketDescription,
      selectedMarketSupplier,
      numeroPrix,
      selectedReference,
      selectedDesignation,
      selectedQuantity
    };

    if (editingIndex !== -1) {
      // Update existing row
      const updatedTableData = [...detailTableData];
      updatedTableData[editingIndex] = updatedData;
      setDetailTableData(updatedTableData);
      setEditingIndex(-1);
    } else {
      // Add new row
      setDetailTableData([...detailTableData, updatedData]);
    }

    setValidationMessage('Validation réussie.');
    setShowValidationModal(true);
    setShowDetailTable(true);
    clearDetailForm();
  };
  */}
  const handleNew = () => {
    setGeneratedNumber('');
    setSelectedMarketId('');
    setSelectedMarketDescription('');
    setSelectedMarketDate(new Date().toISOString().split('T')[0]);
    setSelectedMarketSupplier('');
    setNumeroPrix('');
    setSelectedReference('');
    setSelectedDesignation('');
    setSelectedQuantity('');
    setIsMarketEditable(true); // Enable the Marché field
    setDetailTableData([]);
    setShowDetailTable(false);
    setShowNewConfirmationModal(false); // Close the modal
  };

  const handleQuantityChange = (e) => {
    const value = e.target.value;
    if (value === '' || parseInt(value) >= 0) {
      setSelectedQuantity(value);
    }
  };

  // Données simulées des prix
  const prixInitialData = [
    {
      codeProduit: "REF001",
      designation: "Produit 1",
      numPrix: "NP001",
      qtePrevu: 100,
      qteARecevoir: 100,
      qteRecue: 0
    }
  ];

  const handleReception = (prix) => {
    if (prix.qteARecevoir <= 0) {
      setInfoMessage("La réception n'est pas possible car la quantité totale a déjà été reçue pour cet article.");
      setShowInfoModal(true);
      return;
    }
    setSelectedPrix(prix);
    setShowReceptionModal(true);
    setQteRecue('');
    setSnCodeBarrePairs([]);
  };

  const handleQteRecueChange = (e) => {
    const value = e.target.value;
    if (value === '' || (parseInt(value) >= 0 && Number.isInteger(Number(value)))) {
      setQteRecue(value);
      if (value === '') {
        setSnCodeBarrePairs([]);
      } else {
        const pairs = Array(parseInt(value)).fill().map(() => ({
          sn: '',
          codeBarre: ''
        }));
        setSnCodeBarrePairs(pairs);
      }
    }
  };

  const handleSnChange = (index, value) => {
    const newPairs = [...snCodeBarrePairs];
    newPairs[index].sn = value;
    setSnCodeBarrePairs(newPairs);
  };

  const handleCodeBarreChange = (index, value) => {
    const newPairs = [...snCodeBarrePairs];
    newPairs[index].codeBarre = value;
    setSnCodeBarrePairs(newPairs);
  };

  const handleMarcheSelect = (row) => {
    console.log('Marché sélectionné:', row);
    setSelectedMarche(row.marcheBC);
    setSelectedMarcheDetails(row);
    setShowMarchePopup(false);
    setShowPrixTable(true);
    
    // Extraire et formater les detailsPrix
    if (row.detailProjet && row.detailProjet.length > 0) {
      const details = row.detailProjet.map(projet => {
        // Calculer la quantité totale reçue pour ce projet
        const qteRecueTotal = projet.detailsPrix ? projet.detailsPrix.reduce((total, detail) => {
          return total + (detail.quantiteLivree || 0);
        }, 0) : 0;

        // Récupérer les détails du prix (premier élément si c'est un tableau)
        const prixDetail = projet.detailsPrix && projet.detailsPrix.length > 0 ? projet.detailsPrix[0] : {};
        
        return {
          codeProduit: prixDetail.reference || '',
          designation: prixDetail.designation || '',
          numeroPrix: projet.numeroPrix || '',
          qtePrevu: projet.quantite || 0,
          qteRecue: qteRecueTotal,
          qteARecevoir: (projet.quantite || 0) - qteRecueTotal
        };
      });
      console.log('Details extraits:', details);
      setDetailPrixData(details);
    } else {
      setDetailPrixData([]);
    }
  };

  const handleReceptionSubmit = async () => {
    try {
      // Préparer les données pour la mise à jour des detailsPrix
      const newDetailsPrix = {
        reference: selectedPrix.codeProduit,
        designation: selectedPrix.designation,
        quantiteLivree: parseInt(qteRecue),
        dateReception: selectedMarketDate,
        sn: snCodeBarrePairs.map(pair => pair.sn),
        codeBarre: snCodeBarrePairs.map(pair => pair.codeBarre),
        finGarantie: "", // À définir selon vos besoins
        memo: document.querySelector('textarea[rows="3"]').value, // Récupérer la valeur du champ Memo
        description: selectedMarketDescription // Utiliser la description du marché
      };

      // Appel API pour mettre à jour les detailsPrix
      const response = await axios.put(
        `http://localhost:5003/api/amarches/${selectedMarcheDetails.marcheBC}/detailProjet/${selectedPrix.numeroPrix}/detailsPrix`,
        newDetailsPrix
      );
      
      if (response.status === 200) {
        // Mise à jour réussie
        console.log('Réception enregistrée avec succès:', response.data);
        
        // Mettre à jour l'interface utilisateur
        const updatedDetailPrixData = detailPrixData.map(prix => {
          if (prix.codeProduit === selectedPrix.codeProduit && prix.numeroPrix === selectedPrix.numeroPrix) {
            const nouvelleQteRecue = (parseInt(prix.qteRecue) || 0) + parseInt(qteRecue);
            return {
              ...prix,
              qteRecue: nouvelleQteRecue,
              qteARecevoir: prix.qtePrevu - nouvelleQteRecue
            };
          }
          return prix;
        });
        setDetailPrixData(updatedDetailPrixData);

        // Ajouter à l'historique des réceptions
        const newReceptions = snCodeBarrePairs.map(pair => ({
          codeProduit: selectedPrix.codeProduit,
          designation: selectedPrix.designation,
          numeroPrix: selectedPrix.numeroPrix,
          qteLivree: qteRecue,
          sn: pair.sn,
          finGarantie: "",
          dateReception: selectedMarketDate
        }));
        setReceptionsHistory([...receptionsHistory, ...newReceptions]);

        // Afficher un message de succès
        setInfoMessage("La réception a été enregistrée avec succès.");
        setShowInfoModal(true);
      }
    } catch (error) {
      console.error('Erreur lors de l\'enregistrement de la réception:', error);
      // Afficher un message d'erreur
      setInfoMessage("Une erreur est survenue lors de l'enregistrement de la réception. Veuillez réessayer.");
      setShowInfoModal(true);
    } finally {
      // Fermer le modal et réinitialiser les champs
      setShowReceptionModal(false);
      setQteRecue('');
      setSnCodeBarrePairs([]);
    }
  };

  return (
    <React.Fragment>
      <Row>
        <Col sm={12}>
          <Card>
            <Card.Header className="d-flex justify-content-between align-items-center">
              <div>
                <Button id="new-button" variant="success" className="ms-2 action-button" onClick={() => setShowNewConfirmationModal(true)}>
                  <FaPlus className="me-2" /> Nouveau
                </Button>
                {/** 
                <Button variant="primary" className="ms-2 action-button" onClick={handleValidate}>
                  <FaSave className="me-2" /> Valider
                </Button>
                */}
              </div>
              <div>
                <Button variant="secondary" className="me-2 action-button" onClick={() => { setShowGED(true); setShowForm(false); }}>
                  <FaFileAlt className="me-2" /> GED
                </Button>
                <Button variant="info" className="action-button" onClick={handlePrint}>
                  <FaPrint className="me-2" /> Imprimer
                </Button>
              </div>
            </Card.Header>

            <Card.Body>
              {showForm && (
                <Row>
                <Col md={6}>
                    <div id="form-part-1">
                      {/** 
                  <Form.Group className="mb-3">
                    <Form.Label><FaFileAlt className="me-2" />Numéro</Form.Label>
                        <Form.Control type="text" value={generatedNumber} readOnly />
                  </Form.Group>
                  */}
                  <Form.Group className="mb-3">
                    <Form.Label><FaCalendarAlt className="me-2" />Date</Form.Label>
                        <Form.Control type="date" value={selectedMarketDate} onChange={(e) => setSelectedMarketDate(e.target.value)} />
                  </Form.Group>
                  <Form.Group className="mb-3">
                    <Form.Label><FaClipboardList className="me-2" />Marché</Form.Label>
                    <InputGroup>
                          <Form.Control type="text" value={selectedMarche} readOnly />
                          <Button variant="secondary" className="search-button" onClick={toggleMarchePopup}>
                            <FaSearch />
                          </Button>
                    </InputGroup>
                        {showMarchePopup && (
                          <div className="popup">
                            <Form.Control
                              type="text"
                              placeholder="Rechercher..."
                              value={marcheFilterText}
                              onChange={(e) => setMarcheFilterText(e.target.value)}
                              className="mb-2"
                            />
                            {isLoading ? (
                              <div className="text-center p-3">
                                <span>Chargement des marchés...</span>
                              </div>
                            ) : error ? (
                              <div className="text-center p-3 text-danger">
                                {error}
                              </div>
                            ) : (
                              <Table striped bordered hover size="sm">
                                <thead>
                                  <tr>
                                    <th>Marché BC</th>
                                    <th>Date</th>
                                    <th>Type Marché</th>
                                    <th>Famille Projet</th>
                                    <th>Intitulé Projet</th>
                                    <th>Demandeur</th>
                                    <th>Fiche Projet</th>
                                    <th>Description Projet</th>
                                    <th>Garantie</th>
                                    <th>Délai Execution</th>
                                    <th>Num AO</th>
                                    <th>JDE</th>
                                  </tr>
                                </thead>
                                <tbody>
                                  {filteredMarcheData.map((row, index) => (
                                    <tr key={index} onClick={() => handleMarcheSelect(row)}>
                                      <td>{row.marcheBC}</td>
                                      <td>{row.date}</td>
                                      <td>{row.typeMarche}</td>
                                      <td>{row.familleProjet}</td>
                                      <td>{row.intituleProjet}</td>
                                      <td>{row.demandeur}</td>
                                      <td>{row.ficheProjet}</td>
                                      <td>{row.descriptionProjet}</td>
                                      <td>{row.garantie}</td>
                                      <td>{row.delaiExecution}</td>
                                      <td>{row.numAO}</td>
                                      <td>{row.jde}</td>
                                    </tr>
                                  ))}
                                </tbody>
                              </Table>
                            )}
                          </div>
                        )}
                  </Form.Group>
                  <Form.Group className="mb-3">
                    <Form.Label><FaClipboardList className="me-2" />Description</Form.Label>
                        <Form.Control type="text" value={selectedMarketDescription} onChange={(e) => setSelectedMarketDescription(e.target.value)} />
                  </Form.Group>
                  {/**
                  <Form.Group className="mb-3">
                    <Form.Label><FaStore className="me-2" />dépôt</Form.Label>
                    <InputGroup>
                          <Form.Control type="text" value={selectedCode} readOnly />
                          <Button variant="secondary" className="search-button" onClick={toggleDepotPopup}>
                            <FaSearch />
                          </Button>
                    </InputGroup>
                        {showDepotPopup && (
                          <div className="popup">
                            <Form.Control
                              type="text"
                              placeholder="Filter..."
                              value={depotFilterText}
                              onChange={(e) => setDepotFilterText(e.target.value)}
                              className="mb-2"
                            />
                            <Table striped bordered hover size="sm">
                              <thead>
                                <tr>
                                  <th>Code</th>
                                  <th>Désignation</th>
                                </tr>
                              </thead>
                              <tbody>
                                {filteredDepotData.map((row, index) => (
                                  <tr 
                                    key={index} 
                                    onClick={() => {
                                      setSelectedDepotRow(index);
                                      setSelectedCode(row.code);
                                      setShowDepotPopup(false);
                                    }}
                                    className={selectedDepotRow === index ? 'selected-row' : ''}
                                  >
                                    <td>{row.code}</td>
                                    <td>{row.designation}</td>
                                  </tr>
                                ))}
                              </tbody>
                            </Table>
                          </div>
                        )}
                  </Form.Group>

                  <Form.Group className="mb-3">
                    <Form.Label>Num BL</Form.Label>
                    <Form.Control type="text" />
                  </Form.Group>

                  <Form.Group className="mb-3">
                    <Form.Label>Num FAC</Form.Label>
                    <Form.Control type="text" />
                  </Form.Group>

                  <Form.Group className="mb-3">
                    <Form.Label>Demandeur</Form.Label>
                        <Form.Control type="text"  readOnly />
                  </Form.Group>
                   */}
                  
                  
                    </div>
                </Col>
                 
                <Col md={6}>

                

                 <Form.Group className="mb-3">
                                    <Form.Label><FaUserTie className="me-2" />Fournisseur</Form.Label>
                                    <InputGroup>
                                      <Form.Control type="text" value={selectedFournisseurNom} readOnly className="form-control-modern" />
                                      <Button variant="secondary" className="search-button" onClick={toggleFournisseurPopup}>
                                        <FaSearch />
                                      </Button>
                                    </InputGroup>
                                    {showFournisseurPopup && (
                                      <div className="popup">
                                        <Form.Control
                                          type="text"
                                          placeholder="Filter..."
                                          value={fournisseurFilterText}
                                          onChange={(e) => setFournisseurFilterText(e.target.value)}
                                          className="mb-2 form-control-modern"
                                        />
                                        <Table striped bordered hover size="sm">
                                          <thead>
                                            <tr>
                                              <th>Code Fournisseur</th>
                                              <th>Nom Fournisseur</th>
                                            </tr>
                                          </thead>
                                          <tbody>
                                            {filteredFournisseurData.map((row, index) => (
                                              <tr 
                                                key={index} 
                                                onClick={() => {
                                                  setSelectedFournisseurRow(index);
                                                  setSelectedFournisseurCode(row.codeFrs);
                                                  setSelectedFournisseurNom(row.NomFrs);
                                                  setShowFournisseurPopup(false);
                                                }}
                                                className={selectedFournisseurRow === index ? 'selected-row' : ''}
                                              >
                                                <td>{row.codeFrs}</td>
                                                <td>{row.NomFrs}</td>
                                              </tr>
                                            ))}
                                          </tbody>
                                        </Table>
                                      </div>
                                    )}
                                  </Form.Group>
                  
                  

                  <Form.Group className="mb-3">
                    <Form.Label>Memo</Form.Label>
                        <Form.Control type="text" as="textarea" rows={3} />
                  </Form.Group>


                {/**
                    <Tabs defaultActiveKey="detail" className="mb-3">
                      <Tab eventKey="detail" title="Détail">
                        <Form.Group className="mb-3">
                          <Form.Label><FaTag className="me-2" />N° Prix</Form.Label>
                          <Form.Control type="text" value={numeroPrix} onChange={(e) => setNumeroPrix(e.target.value)} />
                        </Form.Group>
                        <Form.Group className="mb-3">
                          <Form.Label><FaBoxOpen className="me-2" />Référence</Form.Label>
                          <InputGroup>
                            <Form.Control type="text" value={selectedReference} readOnly />
                            <Button variant="secondary" className="search-button" onClick={toggleReferencePopup}>
                              <FaSearch />
                            </Button>
                          </InputGroup>
                          {showReferencePopup && (
                            <div className="popup">
                              <Form.Control
                                type="text"
                                placeholder="Filter..."
                                value={referenceFilterText}
                                onChange={(e) => setReferenceFilterText(e.target.value)}
                                className="mb-2"
                              />
                              <Table striped bordered hover size="sm">
                                <thead>
                                  <tr>
                                    <th>Id</th>
                                    <th>Code Prod</th>
                                    <th>Désignation</th>
                                    <th>Ref</th>
                                    <th>Qté Marché</th>
                                    <th>Qté Liv</th>
                                    <th>Reste Liv</th>
                                    <th>Num Jonction</th>
                                    <th>Marché</th>
                                    <th>N Prix</th>
                                  </tr>
                                </thead>
                                <tbody>
                                  {filteredReferenceData.map((row, index) => (
                                    <tr 
                                      key={index} 
                                      onClick={() => {
                                        setSelectedReferenceRow(index);
                                        setSelectedReference(row.codeProd);
                                        setSelectedDesignation(row.designation);
                                        setSelectedNPrix(row.nPrix);
                                        setNumeroPrix(row.nPrix);
                                        setShowReferencePopup(false);
                                      }}
                                      className={selectedReferenceRow === index ? 'selected-row' : ''}
                                    >
                                      <td>{row.id}</td>
                                      <td>{row.codeProd}</td>
                                      <td>{row.designation}</td>
                                      <td>{row.ref}</td>
                                      <td>{row.qteMarche}</td>
                                      <td>{row.qteLiv}</td>
                                      <td>{row.resteLiv}</td>
                                      <td>{row.numJonction}</td>
                                      <td>{row.marche}</td>
                                      <td>{row.nPrix}</td>
                                    </tr>
                                  ))}
                                </tbody>
                              </Table>
                            </div>
                          )}
                        </Form.Group>
                        <Form.Group className="mb-3">
                          <Form.Label><FaClipboardList className="me-2" />Désignation</Form.Label>
                          <Form.Control type="text" value={selectedDesignation} onChange={(e) => setSelectedDesignation(e.target.value)} />
                        </Form.Group>
                  <Form.Group className="mb-3">
                          <Form.Label>Type Produit</Form.Label>
                    <Form.Control type="text" />
                  </Form.Group>
                  <Form.Group className="mb-3">
                          <Form.Label>Marque</Form.Label>
                          <Form.Control type="text" readOnly />
                  </Form.Group>
                  <Form.Group className="mb-3">
                          <Form.Label>Unité</Form.Label>
                          <Form.Select>
                            <option>U</option>
                            <option>ML</option>
                            <option>KG</option>
                            <option>ENS</option>
                          </Form.Select>
                  </Form.Group>
                  <Form.Group className="mb-3">
                          <Form.Label>Quantité</Form.Label>
                          <Form.Control 
                            type="number" 
                            value={selectedQuantity} 
                            onChange={handleQuantityChange}
                            min="0"
                            step="1"
                          />
                  </Form.Group>
                        <Button variant="danger" className="delete-button" onClick={clearDetailForm}>
                          <FaTrash className="me-2" /> Supprimer
                        </Button>{' '}
                      </Tab>
                      <Tab eventKey="trace" title="Trace">
                        <p>Contenu de l'onglet Trace...</p>
                      </Tab>
                    </Tabs>
                    */}
                </Col>
                
              </Row> 
              )}
              
              {showGED && (
                <div className="ged-container">
                  <Button 
                    variant="link" 
                    className="ged-back-button"
                    onClick={() => { setShowGED(false); setShowForm(true); }}
                  >
                    <FaArrowLeft className="me-2" /> Retour
                  </Button>

                  <div className="text-center">
                    <h3 className="ged-title">
                      <FaFileAlt className="me-2" />
                      Zone GED
                    </h3>
                  </div>

                  <div className="ged-section">
                    <div className="mb-4">
                      <h5 className="ged-subtitle">
                        <FaFile className="me-2" />
                        Documents
                      </h5>
                      
                      <Form>
                        <Form.Group className="mb-4 d-flex align-items-center">
                          <div className="file-upload-container">
                            <FaFileUpload className="me-2 text-primary" size={20} />
                            <Form.Control 
                              type="file" 
                              onChange={handleFileSelectDocuments}
                              className="file-upload-input"
                            />
                          </div>
                          <Button 
                            variant="primary"
                            className="scan-button"
                            onClick={() => setShowSignatureModal(true)}
                          >
                            <FaSignature className="me-2" />
                            Numériser
                          </Button>
                        </Form.Group>
                        </Form>

                      <div className="table-responsive">
                        <Table hover bordered className="ged-table">
                        <thead>
                          <tr>
                              <th className="text-center">ID</th>
                            <th>Nom</th>
                            <th>Type File</th>
                            <th>Date</th>
                            <th>Description</th>
                              <th className="text-center">Actions</th>
                          </tr>
                        </thead>
                        <tbody>
                          {fileListDocuments.map((file) => (
                            <tr key={file.id}>
                                <td className="text-center">{file.id}</td>
                              <td>{file.fileName}</td>
                              <td>{file.typeFile}</td>
                              <td>{file.date}</td>
                              <td>
                                  <Button 
                                    variant="link" 
                                    className="file-link"
                                    onClick={() => {
                                  const url = URL.createObjectURL(file.fileData);
                                  const a = document.createElement('a');
                                  a.href = url;
                                  a.download = file.fileName + '.' + file.typeFile.split('/')[1];
                                  document.body.appendChild(a);
                                  a.click();
                                  document.body.removeChild(a);
                                  URL.revokeObjectURL(url);
                                    }}
                                  >
                                    <FaDownload className="me-2" />
                                    {file.fileName + '.' + file.typeFile.split('/')[1]}
                                  </Button>
                              </td>
                                <td className="text-center">
                                  <Button 
                                    variant="outline-danger"
                                    size="sm"
                                    className="delete-button"
                                    onClick={() => handleRemoveDocuments(file.id)}
                                  >
                                    <FaTrash className="me-1" size={12} />
                                    Supprimer
                                </Button>
                              </td>
                            </tr>
                          ))}
                        </tbody>
                      </Table>
                      </div>
                    </div>

                    <div className="mb-4">
                      <h5 className="ged-subtitle">
                        <FaFile className="me-2" />
                        Bons de Réception des Immobilisations
                      </h5>
                      
                      <Form>
                        <Form.Group className="mb-4 d-flex align-items-center">
                          <div className="file-upload-container">
                            <FaFileUpload className="me-2 text-primary" size={20} />
                            <Form.Control 
                              type="file" 
                              onChange={handleFileSelectBRI}
                              className="file-upload-input"
                            />
                          </div>
                        </Form.Group>
                      </Form>

                      <div className="table-responsive">
                        <Table hover bordered className="ged-table">
                        <thead>
                          <tr>
                              <th className="text-center">ID</th>
                            <th>Nom</th>
                            <th>Type File</th>
                            <th>Date</th>
                            <th>Description</th>
                              <th className="text-center">Actions</th>
                          </tr>
                        </thead>
                        <tbody>
                          {fileListBRI.map((file) => (
                            <tr key={file.id}>
                                <td className="text-center">{file.id}</td>
                              <td>{file.fileName}</td>
                              <td>{file.typeFile}</td>
                              <td>{file.date}</td>
                              <td>
                                  <Button 
                                    variant="link" 
                                    className="file-link"
                                    onClick={() => {
                                  const url = URL.createObjectURL(file.fileData);
                                  const a = document.createElement('a');
                                  a.href = url;
                                  a.download = file.fileName + '.' + file.typeFile.split('/')[1];
                                  document.body.appendChild(a);
                                  a.click();
                                  document.body.removeChild(a);
                                  URL.revokeObjectURL(url);
                                    }}
                                  >
                                    <FaDownload className="me-2" />
                                    {file.fileName + '.' + file.typeFile.split('/')[1]}
                                  </Button>
                              </td>
                                <td className="text-center">
                                  <Button 
                                    variant="outline-danger"
                                    size="sm"
                                    className="delete-button"
                                    onClick={() => handleRemoveBRI(file.id)}
                                  >
                                    <FaTrash className="me-1" size={12} />
                                    Supprimer
                                </Button>
                              </td>
                            </tr>
                          ))}
                        </tbody>
                      </Table>
                      </div>
                    </div>
                  </div>
                </div>
              )}
              
            </Card.Body>
          </Card>
        </Col>
      </Row>

<Modal show={showPrintModal} onHide={() => setShowPrintModal(false)}>
        <Modal.Header closeButton>
          <Modal.Title>
            <FaPrint className="me-2" />
            Confirmation d'impression
          </Modal.Title>
        </Modal.Header>
        <Modal.Body>
          Êtes-vous sûr de vouloir imprimer ce document ?
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowPrintModal(false)}>
            <FaTimes className="me-2" /> Annuler
          </Button>
          <Button variant="primary" onClick={confirmPrint}>
            <FaCheck className="me-2" /> Confirmer et imprimer
          </Button>
        </Modal.Footer>
      </Modal>

      <Modal show={showValidationModal} onHide={() => setShowValidationModal(false)}>
  <Modal.Header closeButton>
          <Modal.Title>
            <FaCheck className="me-2" />
            Validation
          </Modal.Title>
  </Modal.Header>
  <Modal.Body>
          {validationMessage}
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowValidationModal(false)}>
            <FaTimes className="me-2" /> Fermer
          </Button>
        </Modal.Footer>
      </Modal>

      <Modal show={showSignatureModal} onHide={() => setShowSignatureModal(false)}>
        <Modal.Header closeButton className="signature-modal-header">
          <Modal.Title>
            <FaSignature className="me-2" />
            Signature
          </Modal.Title>
        </Modal.Header>
        <Modal.Body className="p-4">
          <Form.Group className="mb-4">
            <Form.Label className="fw-bold">Titre du document</Form.Label>
            <Form.Control 
              type="text" 
              value={signatureTitle} 
              onChange={(e) => setSignatureTitle(e.target.value)}
              placeholder="Entrez un titre..."
              className="signature-title-input"
            />
    </Form.Group>
          <Form.Label className="fw-bold">Zone de signature</Form.Label>
          <div className="signature-canvas-container">
            <canvas 
              id="signatureCanvas" 
              width="400" 
              height="200" 
              className="signature-canvas"
            />
          </div>
          <Button 
            variant="outline-secondary" 
            size="sm" 
            className="d-flex align-items-center"
            onClick={() => {
              const canvas = document.getElementById('signatureCanvas');
              const ctx = canvas.getContext('2d');
              ctx.fillStyle = 'white';
              ctx.fillRect(0, 0, canvas.width, canvas.height);
            }}
          >
            <FaTrash className="me-2" size={12} />
            Effacer
          </Button>
  </Modal.Body>
  <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowSignatureModal(false)}>
            <FaTimes className="me-2" /> Annuler
          </Button>
          <Button 
            variant="primary" 
            onClick={handleSignatureUpload}
            className="upload-button"
          >
            <FaFileUpload className="me-2" />
            Upload
          </Button>
  </Modal.Footer>
</Modal>

      <Modal show={showNewConfirmationModal} onHide={() => setShowNewConfirmationModal(false)}>
        <Modal.Header closeButton className="bg-primary text-white">
          <Modal.Title>
            <FaPlus className="me-2" />
            Nouveau formulaire
          </Modal.Title>
        </Modal.Header>
        <Modal.Body>
          Êtes-vous sûr de vouloir créer un nouveau formulaire ? Toutes les données non enregistrées seront perdues.
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowNewConfirmationModal(false)}>
            <FaTimes className="me-2" /> Annuler
          </Button>
          <Button variant="primary" onClick={handleNew}>
            <FaPlus className="me-2" /> Créer nouveau
          </Button>
        </Modal.Footer>
      </Modal>

      <Modal show={showReceptionModal} onHide={() => setShowReceptionModal(false)} size="lg">
        <Modal.Header closeButton>
          <Modal.Title>
            <FaBoxOpen className="me-2" />
            Réception des articles
          </Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form>
            <Row>
              <Col md={6}>
                <Form.Group className="mb-3">
                  <Form.Label>Code Produit</Form.Label>
                  <Form.Control
                    type="text"
                    value={selectedPrix?.codeProduit || ''}
                    readOnly
                  />
                </Form.Group>
              </Col>
              <Col md={6}>
                <Form.Group className="mb-3">
                  <Form.Label>Num Prix</Form.Label>
                  <Form.Control
                    type="text"
                    value={selectedPrix?.numeroPrix || ''}
                    readOnly
                  />
                </Form.Group>
              </Col>
            </Row>
            <Form.Group className="mb-3">
              <Form.Label>Qte Reçue</Form.Label>
              <Form.Control
                type="number"
                value={qteRecue}
                onChange={handleQteRecueChange}
                min="0"
                step="1"
              />
            </Form.Group>
            
            {snCodeBarrePairs.length > 0 && (
              <Card className="mt-3">
                <Card.Header>
                  <h6 className="mb-0">Détails des articles</h6>
                </Card.Header>
                <Card.Body>
                  {snCodeBarrePairs.map((pair, index) => (
                    <Row key={index} className="mb-2">
                      <Col>
                        <Form.Control
                          type="text"
                          placeholder="SN"
                          value={pair.sn}
                          onChange={(e) => handleSnChange(index, e.target.value)}
                        />
                      </Col>
                      <Col>
                        <Form.Control
                          type="text"
                          placeholder="Code-barre"
                          value={pair.codeBarre}
                          onChange={(e) => handleCodeBarreChange(index, e.target.value)}
                        />
                      </Col>
                    </Row>
                  ))}
                </Card.Body>
              </Card>
            )}
          </Form>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowReceptionModal(false)}>
            <FaTimes className="me-2" /> Annuler
          </Button>
          <Button variant="primary" onClick={handleReceptionSubmit}>
            <FaSave className="me-2" /> Recevoir
          </Button>
        </Modal.Footer>
      </Modal>

      <Modal show={showInfoModal} onHide={() => setShowInfoModal(false)}>
        <Modal.Header closeButton className="bg-info text-white">
          <Modal.Title>
            <FaInfoCircle className="me-2" />
            Information
          </Modal.Title>
        </Modal.Header>
        <Modal.Body>
          {infoMessage}
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowInfoModal(false)}>
            <FaTimes className="me-2" /> Fermer
          </Button>
        </Modal.Footer>
      </Modal>

      <style>
        {`
          .card {
            background: white;
            border-radius: 4px;
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
            margin-bottom: 0.5rem;
          }

          .card-header {
            background: #f8f9fa;
            border-bottom: 1px solid #e9ecef;
            padding: 0.5rem 1rem;
          }

          .card-body {
            padding: 0.75rem;
          }

          .card-header .btn {
            margin: 0 0.25rem;
            padding: 0.25rem 0.75rem;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            font-weight: 500;
            font-size: 0.875rem;
          }

          .form-label {
            color: #495057;
            font-weight: 500;
            margin-bottom: 0.25rem;
            font-size: 0.875rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
          }

          .form-control {
            border: 1px solid #ced4da;
            border-radius: 4px;
            padding: 0.25rem 0.5rem;
            font-size: 0.875rem;
            min-height: 32px;
            transition: border-color 0.15s ease-in-out;
          }

          .form-control:focus {
            border-color: #80bdff;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
          }

          .input-group .btn {
            padding: 0.25rem 0.5rem;
            background: #e9ecef;
            border-color: #ced4da;
            color: #495057;
            font-size: 0.875rem;
          }

          .table {
            margin-top: 0.5rem;
            font-size: 0.875rem;
          }

          .table thead th {
            background: #f8f9fa;
            border-bottom: 2px solid #dee2e6;
            color: #495057;
            font-weight: 600;
            padding: 0.5rem;
            white-space: nowrap;
          }

          .table tbody td {
            padding: 0.5rem;
            vertical-align: middle;
          }

          .table tbody tr:hover {
            background-color: #f8f9fa;
            cursor: pointer;
          }

          .popup {
            position: absolute;
            z-index: 1000;
            background: white;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            padding: 0.15rem;
            margin-top: 2px;
            max-height: 120px;
            overflow-y: auto;
            width: 500px;
            max-width: 95%;
          }

          .popup .table {
            margin: 0;
            font-size: 0.7rem;
          }

          .popup .table thead th {
            padding: 0.15rem 0.25rem;
            font-size: 0.7rem;
            white-space: nowrap;
            background: #f8f9fa;
            position: sticky;
            top: 0;
            z-index: 1;
          }

          .popup .table tbody td {
            padding: 0.15rem 0.25rem;
            font-size: 0.7rem;
          }

          .popup .table tbody tr:hover {
            background-color: #f8f9fa;
            cursor: pointer;
          }

          .popup .form-control {
            font-size: 0.7rem;
            padding: 0.15rem 0.25rem;
            margin-bottom: 0.15rem;
            height: 24px;
          }

          .modal-content {
            border-radius: 4px;
            overflow: hidden;
          }

          .modal-header {
            background: linear-gradient(45deg, #007bff, #0056b3);
            color: white;
            padding: 0.5rem 1rem;
          }

          .modal-title {
            color: white;
            font-weight: 500;
            font-size: 0.875rem;
          }

          .modal-body {
            padding: 0.75rem;
          }

          .modal-footer {
            background: #f8f9fa;
            border-top: 1px solid #dee2e6;
            padding: 0.5rem 1rem;
          }

          .nav-tabs {
            border-bottom: 1px solid #dee2e6;
            margin-bottom: 0.75rem;
          }

          .nav-tabs .nav-link {
            color: #6c757d;
            padding: 0.5rem 0.75rem;
            border: none;
            border-bottom: 2px solid transparent;
            transition: all 0.2s;
            font-size: 0.875rem;
          }

          .nav-tabs .nav-link.active {
            color: #007bff;
            border-bottom-color: #007bff;
          }

          .btn-success {
            background: linear-gradient(45deg, #28a745, #20c997);
            border: none;
          }

          .btn-primary {
            background: linear-gradient(45deg, #007bff, #0056b3);
            border: none;
          }

          .btn-secondary {
            background: linear-gradient(45deg, #6c757d, #5a6268);
            border: none;
          }

          .btn-info {
            background: linear-gradient(45deg, #17a2b8, #138496);
            border: none;
          }

          .btn-danger {
            background: linear-gradient(45deg, #dc3545, #c82333);
            border: none;
          }

          .btn {
            padding: 0.25rem 0.75rem;
            font-size: 0.875rem;
            border-radius: 4px;
            transition: all 0.2s ease;
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
            margin-right: 0.5rem;
          }

          .btn:hover {
            opacity: 0.9;
            transform: translateY(-1px);
          }

          .form-group {
            margin-bottom: 0.5rem;
          }

          .action-button {
            display: inline-flex;
            align-items: center;
            padding: 0.25rem 0.75rem;
            border-radius: 4px;
            font-weight: 500;
            font-size: 0.875rem;
            transition: all 0.2s ease;
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
            margin-right: 0.5rem;
          }

          .action-button:hover {
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);
          }

          .search-button {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            width: 32px;
            padding: 0;
            border-radius: 0 4px 4px 0;
          }

          .delete-button {
            display: inline-flex;
            align-items: center;
            padding: 0.25rem 0.75rem;
            border-radius: 4px;
            font-size: 0.875rem;
            transition: all 0.2s ease;
          }

          .delete-button:hover {
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(220, 53, 69, 0.2);
          }

          .form-label svg {
            color: #6c757d;
            margin-right: 0.5rem;
          }

          .mb-4 {
            margin-bottom: 0.75rem !important;
          }

          .mb-3 {
            margin-bottom: 0.5rem !important;
          }

          .me-2 {
            margin-right: 0.375rem !important;
          }

          .input-group {
            min-height: 32px;
          }

          .input-group .form-control {
            height: 32px;
          }
        `}
      </style>

      {showDetailTable && (
        <Table striped bordered hover size="sm" className="mt-3">
          <thead>
            <tr>
              <th>Numéro</th>
              <th>Date</th>
              <th>Marché</th>
              <th>Description</th>
              <th>Fournisseur</th>
              <th>N° Prix</th>
              <th>Référence</th>
              <th>Désignation</th>
              <th>Quantité</th>
            </tr>
          </thead>
          <tbody>
            {detailTableData.map((data, index) => (
              <tr 
                key={index} 
                onDoubleClick={() => {
                  setSelectedDetailRow(index);
                  setNumeroPrix(data.numeroPrix);
                  setSelectedReference(data.selectedReference);
                  setSelectedDesignation(data.selectedDesignation);
                  setSelectedQuantity(data.selectedQuantity);
                  setEditingIndex(index);
                }}
                className={selectedDetailRow === index ? 'selected-row' : ''}
              >
                <td>{data.generatedNumber}</td>
                <td>{data.selectedMarketDate}</td>
                <td>{data.selectedMarketId}</td>
                <td>{data.selectedMarketDescription}</td>
                <td>{data.selectedMarketSupplier}</td>
                <td>{data.numeroPrix}</td>
                <td>{data.selectedReference}</td>
                <td>{data.selectedDesignation}</td>
                <td>{data.selectedQuantity}</td>
              </tr>
            ))}
          </tbody>
        </Table>
      )}

      {showPrixTable && detailPrixData.length > 0 && (
        <Table striped bordered hover className="mt-4">
          <thead>
            <tr>
              <th>Code Produit</th>
              <th>Désignation</th>
              <th>Num Prix</th>
              <th>Qte Prévu</th>
              <th>Qte à Recevoir</th>
              <th>Qte Reçue</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {detailPrixData.map((prix, index) => (
              <tr key={index}>
                <td>{prix.codeProduit}</td>
                <td>{prix.designation}</td>
                <td>{prix.numeroPrix}</td>
                <td>{prix.qtePrevu}</td>
                <td>{prix.qteARecevoir}</td>
                <td>{prix.qteRecue}</td>
                <td>
                  <Button 
                    variant="primary" 
                    size="sm"
                    onClick={() => handleReception(prix)}
                  >
                    <FaBoxOpen className="me-2" />
                    Réception
                  </Button>
                </td>
              </tr>
            ))}
          </tbody>
        </Table>
      )}

      {showPrixTable && receptionsHistory.length > 0 && (
        <Row className="mt-5">
          <Col sm={12}>
            <Card>
              <Card.Header className="bg-light">
                <h5 className="mb-0">
                  <FaHistory className="me-2" />
                  Historique des réceptions
                </h5>
              </Card.Header>
              <Card.Body>
                <Table striped bordered hover responsive>
                  <thead>
                    <tr>
                      <th>Code Produit</th>
                      <th>Désignation</th>
                      <th>Num Prix</th>
                      <th>Qte livrée</th>
                      <th>SN</th>
                      <th>Fin Garantie</th>
                      <th>Date Réception</th>
                    </tr>
                  </thead>
                  <tbody>
                    {receptionsHistory.map((reception, index) => (
                      <tr key={index}>
                        <td>{reception.codeProduit}</td>
                        <td>{reception.designation}</td>
                        <td>{reception.numeroPrix}</td>
                        <td>{reception.qteLivree}</td>
                        <td>{reception.sn}</td>
                        <td>{reception.finGarantie}</td>
                        <td>{reception.dateReception}</td>
                      </tr>
                    ))}
                  </tbody>
                </Table>
              </Card.Body>
            </Card>
          </Col>
        </Row>
      )}
    </React.Fragment>
  );
};

export default FormsElements;
