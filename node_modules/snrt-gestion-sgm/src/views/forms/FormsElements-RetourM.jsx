import React, { useState } from 'react'; 
import { Row, Col, Card, Form, Button, InputGroup, Modal, DropdownButton, Dropdown, Tabs, Tab, Table } from 'react-bootstrap';
import { FaPlus, FaSave, FaPrint, FaFileAlt, FaCalendarAlt, FaClipboardList, FaStore, FaUser, FaTag, FaTrash, FaArrowLeft, FaSignature, FaFileUpload, FaTimes, FaCheck, FaSearch, FaDownload, FaFile, FaBoxOpen } from 'react-icons/fa';
import './GEDStyles.css';

const FormsElements = () => {
  const [showPrintModal, setShowPrintModal] = useState(false);
  const [showValidationModal, setShowValidationModal] = useState(false);
  const [showSignatureModal, setShowSignatureModal] = useState(false);
  const [showNewModal, setShowNewModal] = useState(false);
  const [showGED, setShowGED] = useState(false);
  const [showForm, setShowForm] = useState(true);
  const [generatedNumber, setGeneratedNumber] = useState('');
  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split('T')[0]);
  const [selectedAffectation, setSelectedAffectation] = useState('');
  const [selectedAffectationDetails, setSelectedAffectationDetails] = useState({});
  const [selectedReference, setSelectedReference] = useState('');
  const [selectedReferenceDetails, setSelectedReferenceDetails] = useState({});
  const [selectedQuantity, setSelectedQuantity] = useState('');
  const [validationMessage, setValidationMessage] = useState('');
  const [signatureTitle, setSignatureTitle] = useState('');
  const [showAffectationPopup, setShowAffectationPopup] = useState(false);
  const [affectationFilterText, setAffectationFilterText] = useState('');
  const [showReferencePopup, setShowReferencePopup] = useState(false);
  const [referenceFilterText, setReferenceFilterText] = useState('');
  const [detailTableData, setDetailTableData] = useState([]);
  const [editingIndex, setEditingIndex] = useState(null);
  const [fileListDocuments, setFileListDocuments] = useState([]);
  const [showDetailTable, setShowDetailTable] = useState(false);
  const [responsable, setResponsable] = useState('');
  const [utilisateur, setUtilisateur] = useState('');
  const [designation, setDesignation] = useState('');
  const [isAffectationDisabled, setIsAffectationDisabled] = useState(false);
  const [selectedDepot, setSelectedDepot] = useState('');
  const [showDepotPopup, setShowDepotPopup] = useState(false);
  const [depotFilterText, setDepotFilterText] = useState('');

  // Données mockées pour l'affectation
  const affectationData = [
    { numDoc: 'AFF001', date_d: '2024-03-20', departement: 'Dept1', commentaire: 'Com1', responsable: 'Resp1', utilisateur: 'User1', service: 'Service1' },
    { numDoc: 'AFF002', date_d: '2024-03-21', departement: 'Dept2', commentaire: 'Com2', responsable: 'Resp2', utilisateur: 'User2', service: 'Service2' }
  ];

  // Données mockées pour la référence
  const referenceData = [
    { idL: '1', codeProd: 'CP1', designation: 'Des1', reste: '100', qteAff: '50', qteRetournee: '0', numJonction: 'NJ1', marche: 'M1' },
    { idL: '2', codeProd: 'CP2', designation: 'Des2', reste: '200', qteAff: '100', qteRetournee: '0', numJonction: 'NJ2', marche: 'M2' }
  ];

  // Données mockées pour les dépôts
  const depotData = [
    { code: 'D001', designation: 'Dépôt Principal' },
    { code: 'D002', designation: 'Dépôt Secondaire' },
    { code: 'D003', designation: 'Dépôt Tertiaire' },
    { code: 'D004', designation: 'Dépôt de Stockage' },
    { code: 'D005', designation: 'Dépôt de Distribution' }
  ];

  const filteredAffectationData = affectationData.filter(item =>
    Object.values(item).some(val =>
      String(val).toLowerCase().includes(affectationFilterText.toLowerCase())
    )
  );

  const filteredReferenceData = referenceData.filter(item =>
    Object.values(item).some(val =>
      String(val).toLowerCase().includes(referenceFilterText.toLowerCase())
    )
  );

  const filteredDepotData = depotData.filter(item =>
    Object.values(item).some(val =>
      String(val).toLowerCase().includes(depotFilterText.toLowerCase())
    )
  );

  const handlePrint = () => {
    setShowPrintModal(true);
  };

  const confirmPrint = () => {
    setShowPrintModal(false);
    window.print();
  };

  const handleNew = () => {
    setShowNewModal(true);
  };

  const handleValidate = () => {
    if (!selectedAffectation) {
      setValidationMessage('Veuillez sélectionner un numéro d\'affectation.');
      setShowValidationModal(true);
      return;
    }

    // Vérifier référence et quantité
    if (!selectedReference || !selectedQuantity) {
      setValidationMessage('Veuillez sélectionner une référence et spécifier une quantité.');
      setShowValidationModal(true);
      return;
    }

    // Générer le numéro si pas déjà généré
    const currentNumber = generatedNumber || `RET-${Math.floor(Math.random() * 10000)}`;
    setGeneratedNumber(currentNumber);
    setIsAffectationDisabled(true);

    const updatedData = {
      generatedNumber: currentNumber,
      selectedDate,
      selectedAffectation,
      selectedAffectationDetails,
      responsable,
      utilisateur,
      selectedReference,
      selectedReferenceDetails,
      designation: selectedReferenceDetails.designation,
      selectedQuantity
    };

    if (editingIndex !== null) {
      const updatedTableData = [...detailTableData];
      updatedTableData[editingIndex] = updatedData;
      setDetailTableData(updatedTableData);
      setEditingIndex(null);
    } else {
      setDetailTableData([...detailTableData, updatedData]);
    }

    setValidationMessage('Validation réussie.');
    setShowValidationModal(true);
    setShowDetailTable(true);
    clearDetailForm();
  };

  const handleFileSelectDocuments = (e) => {
    const file = e.target.files[0];
    if (file) {
      const newFile = {
        id: Date.now(),
        fileName: file.name.split('.')[0],
        typeFile: file.type,
        date: new Date().toLocaleDateString(),
        fileData: file
      };
      setFileListDocuments(prevFiles => [...prevFiles, newFile]);
    }
  };

  const handleRemoveDocuments = (id) => {
    setFileListDocuments(prevFiles => prevFiles.filter(file => file.id !== id));
  };

  const handleSignatureUpload = () => {
    if (!signatureTitle) {
      alert('Veuillez saisir le titre !');
      return;
    }

    const canvas = document.getElementById('signatureCanvas');
    canvas.toBlob((blob) => {
      const signatureFile = {
        id: Date.now(),
        fileName: signatureTitle,
        date: new Date().toLocaleDateString(),
        fileData: blob,
        typeFile: 'image/png',
        description: `${signatureTitle}.png`,
      };

      setFileListDocuments([...fileListDocuments, signatureFile]);
      setShowSignatureModal(false);
      setSignatureTitle('');
    }, 'image/png');
  };

  const confirmNew = () => {
    setGeneratedNumber('');
    setSelectedDate(new Date().toISOString().split('T')[0]);
    setSelectedAffectation('');
    setSelectedAffectationDetails({});
    setResponsable('');
    setUtilisateur('');
    setSelectedReference('');
    setSelectedReferenceDetails({});
    setSelectedQuantity('');
    setDesignation('');
    setDetailTableData([]);
    setShowDetailTable(false);
    setShowNewModal(false);
    setShowForm(true);
    setIsAffectationDisabled(false); // Réactiver le champ pour un nouveau formulaire
  };

  const toggleAffectationPopup = () => {
    setShowAffectationPopup(!showAffectationPopup);
  };

  const toggleReferencePopup = () => {
    setShowReferencePopup(!showReferencePopup);
  };

  const handleQuantityChange = (e) => {
    const value = e.target.value;
    if (value === '' || parseInt(value) >= 0) {
      setSelectedQuantity(value);
    }
  };

  const clearDetailForm = () => {
    setSelectedReference('');
    setSelectedReferenceDetails({});
    setSelectedQuantity('');
    setDesignation('');
  };

  const toggleDepotPopup = () => {
    setShowDepotPopup(!showDepotPopup);
  };

  return (
    <React.Fragment>
      <Row>
        <Col sm={12}>
          <Card>
            <Card.Header className="d-flex justify-content-between align-items-center" style={{ background: 'white' }}>
              <div>
                <Button variant="success" className="ms-2 action-button" onClick={handleNew}>
                  <FaPlus className="me-2" /> Nouveau
                </Button>
                <Button variant="primary" className="ms-2 action-button" onClick={handleValidate}>
                  <FaSave className="me-2" /> Valider
                </Button>
              </div>
                          <div>
                <Button variant="secondary" className="me-2 action-button" onClick={() => { setShowGED(true); setShowForm(false); }}>
                  <FaFileAlt className="me-2" /> GED
                </Button>
                <Button variant="info" className="action-button" onClick={handlePrint}>
                  <FaPrint className="me-2" /> Imprimer
                </Button>
                          </div>
                        </Card.Header>

            <Card.Body>
              {showForm && (
              <Row>
                <Col md={6}>
                  <Form.Group className="mb-3">
                      <Form.Label><FaFileAlt className="me-2" />Numéro</Form.Label>
                      <Form.Control type="text" value={generatedNumber} readOnly />
                  </Form.Group>
                      <Form.Group className="mb-3">
                      <Form.Label><FaCalendarAlt className="me-2" />Date</Form.Label>
                      <Form.Control type="date" value={selectedDate} onChange={(e) => setSelectedDate(e.target.value)} />
                  </Form.Group>
                  <Form.Group className="mb-3">
                      <Form.Label><FaClipboardList className="me-2" />Num Affectation</Form.Label>
                      <InputGroup>
                        <Form.Control type="text" value={selectedAffectation} readOnly />
                        <Button 
                          variant="secondary" 
                          className="search-button" 
                          onClick={toggleAffectationPopup}
                          disabled={isAffectationDisabled}
                        >
                          <FaSearch />
                        </Button>
                      </InputGroup>
                      {showAffectationPopup && (
                        <div className="popup">
                          <Form.Control
                            type="text"
                            placeholder="Rechercher..."
                            value={affectationFilterText}
                            onChange={(e) => setAffectationFilterText(e.target.value)}
                            className="mb-2"
                          />
                          <Table striped bordered hover size="sm">
                            <thead>
                              <tr>
                                <th>Num Doc</th>
                                <th>Date_d</th>
                                <th>Département</th>
                                <th>Commentaire</th>
                                <th>Responsable</th>
                                <th>Utilisateur</th>
                              </tr>
                            </thead>
                            <tbody>
                              {filteredAffectationData.map((row, index) => (
                                <tr key={index} onClick={() => {
                                  setSelectedAffectation(row.numDoc);
                                  setSelectedAffectationDetails(row);
                                  setResponsable(row.responsable);
                                  setUtilisateur(row.utilisateur);
                                  setSelectedDate(row.date_d);
                                  setShowAffectationPopup(false);
                                }}>
                                  <td>{row.numDoc}</td>
                                  <td>{row.date_d}</td>
                                  <td>{row.departement}</td>
                                  <td>{row.commentaire}</td>
                                  <td>{row.responsable}</td>
                                  <td>{row.utilisateur}</td>
                                </tr>
                              ))}
                            </tbody>
                          </Table>
                        </div>
                      )}
                  </Form.Group>
                  <Form.Group className="mb-3">
                      <Form.Label><FaStore className="me-2" />Service</Form.Label>
                      <Form.Control type="text" value={selectedAffectationDetails.departement} readOnly />
                  </Form.Group>
                  <Form.Group className="mb-3">
                      <Form.Label><FaStore className="me-2" />Dépôt</Form.Label>
                      <InputGroup>
                        <Form.Control type="text" value={selectedDepot} readOnly />
                        <Button variant="secondary" className="search-button" onClick={toggleDepotPopup}>
                          <FaSearch />
                        </Button>
                      </InputGroup>
                      {showDepotPopup && (
                        <div className="popup">
                          <Form.Control
                            type="text"
                            placeholder="Rechercher..."
                            value={depotFilterText}
                            onChange={(e) => setDepotFilterText(e.target.value)}
                            className="mb-2"
                          />
                          <Table striped bordered hover size="sm">
                            <thead>
                              <tr>
                                <th>Code</th>
                                <th>Designation</th>
                              </tr>
                            </thead>
                            <tbody>
                              {filteredDepotData.map((row, index) => (
                                <tr key={index} onClick={() => {
                                  setSelectedDepot(row.code);
                                  setSelectedDepotDetails(row);
                                  setShowDepotPopup(false);
                                }}>
                                  <td>{row.code}</td>
                                  <td>{row.designation}</td>
                                </tr>
                              ))}
                            </tbody>
                          </Table>
                        </div>
                      )}
                  </Form.Group>
                </Col>
                <Col md={6}>
                  <Form.Group className="mb-3">
                      <Form.Label><FaUser className="me-2" />Responsable</Form.Label>
                      <Form.Control 
                        type="text" 
                        value={responsable} 
                        onChange={(e) => setResponsable(e.target.value)} 
                      />
                  </Form.Group>
                  <Form.Group className="mb-3">
                      <Form.Label><FaUser className="me-2" />Utilisateur</Form.Label>
                      <Form.Control 
                        type="text" 
                        value={utilisateur} 
                        onChange={(e) => setUtilisateur(e.target.value)} 
                      />
                  </Form.Group>
                  <Form.Group className="mb-3">
                      <Form.Label><FaClipboardList className="me-2" />Mémo</Form.Label>
                    <Form.Control as="textarea" rows={3} />
                  </Form.Group>
                </Col>
              </Row>
              )}

              {showForm && (
              <Tabs defaultActiveKey="detail" className="mb-3">
                <Tab eventKey="detail" title="Détail">
                  <Row>
                    <Col md={6}>
                    <Form.Group className="mb-3">
                          <Form.Label><FaBoxOpen className="me-2" />Référence</Form.Label>
                        <InputGroup>
                            <Form.Control type="text" value={selectedReference} readOnly />
                            <Button variant="secondary" className="search-button" onClick={toggleReferencePopup}>
                              <FaSearch />
                            </Button>
                        </InputGroup>
                          {showReferencePopup && (
                            <div className="popup">
                              <Form.Control
                                type="text"
                                placeholder="Rechercher..."
                                value={referenceFilterText}
                                onChange={(e) => setReferenceFilterText(e.target.value)}
                                className="mb-2"
                              />
                              <Table striped bordered hover size="sm">
                                <thead>
                                  <tr>
                                    <th>Code</th>
                                    <th>Designation</th>
                                    <th>Reste</th>
                                    <th>Qte Aff</th>
                                    <th>Qte Retournée</th>
                                    <th>Num Jonction</th>
                                    <th>Marché</th>
                                  </tr>
                                </thead>
                                <tbody>
                                  {filteredReferenceData.map((row, index) => (
                                    <tr key={index} onClick={() => {
                                      setSelectedReference(row.codeProd);
                                      setSelectedReferenceDetails(row);
                                      setDesignation(row.designation);
                                      setShowReferencePopup(false);
                                    }}>
                                      <td>{row.idL}</td>
                                      <td>{row.designation}</td>
                                      <td>{row.reste}</td>
                                      <td>{row.qteAff}</td>
                                      <td>{row.qteRetournee}</td>
                                      <td>{row.numJonction}</td>
                                      <td>{row.marche}</td>
                                    </tr>
                                  ))}
                                </tbody>
                              </Table>
                            </div>
                          )}
                      </Form.Group>
                      <Form.Group className="mb-3">
                          <Form.Label><FaClipboardList className="me-2" />Désignation</Form.Label>
                          <Form.Control 
                            type="text" 
                            value={designation} 
                            readOnly 
                          />
                      </Form.Group>
                    </Col>
                    <Col md={6}>
                      <Form.Group className="mb-3">
                          <Form.Label><FaTag className="me-2" />Quantité</Form.Label>
                          <Form.Control
                            type="number"
                            value={selectedQuantity}
                            onChange={handleQuantityChange}
                            min="0"
                            step="1"
                          />
                      </Form.Group>
                    </Col>
                  </Row>
                    <Button variant="danger" className="delete-button" onClick={clearDetailForm}>
                      <FaTrash className="me-2" /> Supprimer
                    </Button>
                </Tab>
                <Tab eventKey="trace" title="Trace">
                  <p>Historique des modifications...</p>
                </Tab>
              </Tabs>
              )}

              {showGED && (
                <div className="ged-container">
                  <Button 
                    variant="link" 
                    className="ged-back-button"
                    onClick={() => { setShowGED(false); setShowForm(true); }}
                  >
                    <FaArrowLeft className="me-2" /> Retour
                  </Button>

                  <div className="text-center">
                    <h3 className="ged-title">
                      <FaFileAlt className="me-2" />
                      Zone GED
                    </h3>
                  </div>

                  <div className="ged-section">
                    <div className="mb-4">
                      <h5 className="ged-subtitle">
                        <FaFile className="me-2" />
                        Documents
                      </h5>
                      
                      <Form>
                        <Form.Group className="mb-4 d-flex align-items-center">
                          <div className="file-upload-container">
                            <FaFileUpload className="me-2 text-primary" size={20} />
                            <Form.Control 
                              type="file" 
                              onChange={handleFileSelectDocuments}
                              className="file-upload-input"
                            />
                          </div>
                          <Button 
                            variant="primary"
                            className="scan-button"
                            onClick={() => setShowSignatureModal(true)}
                          >
                            <FaSignature className="me-2" />
                            Numériser
                          </Button>
                        </Form.Group>
                      </Form>

                      <div className="table-responsive">
                        <Table hover bordered className="ged-table">
                          <thead>
                            <tr>
                              <th className="text-center">ID</th>
                              <th>Nom</th>
                              <th>Type File</th>
                              <th>Date</th>
                              <th>Description</th>
                              <th className="text-center">Actions</th>
                            </tr>
                          </thead>
                          <tbody>
                            {fileListDocuments.map((file) => (
                              <tr key={file.id}>
                                <td className="text-center">{file.id}</td>
                                <td>{file.fileName}</td>
                                <td>{file.typeFile}</td>
                                <td>{file.date}</td>
                                <td>
                                  <Button 
                                    variant="link" 
                                    className="file-link"
                                    onClick={() => {
                                      const url = URL.createObjectURL(file.fileData);
                                      const a = document.createElement('a');
                                      a.href = url;
                                      a.download = file.fileName + '.' + file.typeFile.split('/')[1];
                                      document.body.appendChild(a);
                                      a.click();
                                      document.body.removeChild(a);
                                      URL.revokeObjectURL(url);
                                    }}
                                  >
                                    <FaDownload className="me-2" />
                                    {file.fileName + '.' + file.typeFile.split('/')[1]}
                                  </Button>
                                </td>
                                <td className="text-center">
                                  <Button 
                                    variant="outline-danger"
                                    size="sm"
                                    className="delete-button"
                                    onClick={() => handleRemoveDocuments(file.id)}
                                  >
                                    <FaTrash className="me-1" size={12} />
                                    Supprimer
                                  </Button>
                                </td>
                              </tr>
                            ))}
                          </tbody>
                        </Table>
                      </div>
                    </div>
                  </div>
                </div>
              )}

              {showDetailTable && (
                <Table striped bordered hover size="sm" className="mt-3">
                  <thead>
                    <tr>
                      <th>Numéro</th>
                      <th>Date</th>
                      <th>Num Affectation</th>
                      <th>Service</th>
                      <th>Responsable</th>
                      <th>Utilisateur</th>
                      <th>Référence</th>
                      <th>Désignation</th>
                      <th>Quantité</th>
                    </tr>
                  </thead>
                  <tbody>
                    {detailTableData.map((data, index) => (
                      <tr key={index} onDoubleClick={() => {
                        setSelectedReference(data.selectedReference);
                        setSelectedReferenceDetails(data.selectedReferenceDetails);
                        setSelectedQuantity(data.selectedQuantity);
                        setDesignation(data.selectedReferenceDetails.designation);
                        setEditingIndex(index);
                      }}>
                        <td>{data.generatedNumber}</td>
                        <td>{data.selectedDate}</td>
                        <td>{data.selectedAffectation}</td>
                        <td>{data.selectedAffectationDetails.service}</td>
                        <td>{data.responsable}</td>
                        <td>{data.utilisateur}</td>
                        <td>{data.selectedReference}</td>
                        <td>{data.selectedReferenceDetails.designation}</td>
                        <td>{data.selectedQuantity}</td>
                      </tr>
                    ))}
                  </tbody>
                </Table>
              )}
            </Card.Body>
          </Card>
        </Col>
      </Row>

      <Modal show={showPrintModal} onHide={() => setShowPrintModal(false)}>
        <Modal.Header closeButton>
          <Modal.Title>
            <FaPrint className="me-2" />
            Confirmation d'impression
          </Modal.Title>
        </Modal.Header>
        <Modal.Body>
          Êtes-vous sûr de vouloir imprimer ce document ?
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowPrintModal(false)}>
            <FaTimes className="me-2" /> Annuler
          </Button>
          <Button variant="primary" onClick={confirmPrint}>
            <FaCheck className="me-2" /> Confirmer et imprimer
          </Button>
        </Modal.Footer>
      </Modal>

      <Modal show={showValidationModal} onHide={() => setShowValidationModal(false)}>
        <Modal.Header closeButton>
          <Modal.Title>
            <FaCheck className="me-2" />
            Validation
          </Modal.Title>
        </Modal.Header>
        <Modal.Body>
          {validationMessage}
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowValidationModal(false)}>
            <FaTimes className="me-2" /> Fermer
          </Button>
        </Modal.Footer>
      </Modal>

      <Modal show={showSignatureModal} onHide={() => setShowSignatureModal(false)}>
        <Modal.Header closeButton className="signature-modal-header">
          <Modal.Title>
            <FaSignature className="me-2" />
            Signature
          </Modal.Title>
        </Modal.Header>
        <Modal.Body className="p-4">
          <Form.Group className="mb-4">
            <Form.Label className="fw-bold">Titre du document</Form.Label>
            <Form.Control 
              type="text" 
              value={signatureTitle} 
              onChange={(e) => setSignatureTitle(e.target.value)}
              placeholder="Entrez un titre..."
              className="signature-title-input"
            />
          </Form.Group>
          <Form.Label className="fw-bold">Zone de signature</Form.Label>
          <div className="signature-canvas-container">
            <canvas 
              id="signatureCanvas" 
              width="400" 
              height="200" 
              className="signature-canvas"
            />
          </div>
          <Button 
            variant="outline-secondary" 
            size="sm" 
            className="d-flex align-items-center"
            onClick={() => {
              const canvas = document.getElementById('signatureCanvas');
              const ctx = canvas.getContext('2d');
              ctx.fillStyle = 'white';
              ctx.fillRect(0, 0, canvas.width, canvas.height);
            }}
          >
            <FaTrash className="me-2" size={12} />
            Effacer
          </Button>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowSignatureModal(false)}>
            <FaTimes className="me-2" /> Annuler
          </Button>
          <Button 
            variant="primary" 
            onClick={handleSignatureUpload}
            className="upload-button"
          >
            <FaFileUpload className="me-2" />
            Upload
          </Button>
        </Modal.Footer>
      </Modal>

      <Modal show={showNewModal} onHide={() => setShowNewModal(false)}>
        <Modal.Header closeButton className="bg-primary text-white">
          <Modal.Title>
            <FaPlus className="me-2" />
            Nouveau formulaire
          </Modal.Title>
        </Modal.Header>
        <Modal.Body>
          Êtes-vous sûr de vouloir créer un nouveau formulaire ? Toutes les données non enregistrées seront perdues.
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowNewModal(false)}>
            <FaTimes className="me-2" /> Annuler
          </Button>
          <Button variant="primary" onClick={confirmNew}>
            <FaPlus className="me-2" /> Créer nouveau
          </Button>
        </Modal.Footer>
      </Modal>

      <style>
        {`
          .card {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            margin-bottom: 0.5rem;
          }

          .card-header {
            background: linear-gradient(45deg, #007bff, #0056b3);
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 8px 8px 0 0;
          }

          .card-body {
            padding: 0.75rem;
          }

          .form-label {
            font-weight: 500;
            color: #495057;
            margin-bottom: 0.25rem;
            font-size: 0.875rem;
            display: flex;
            align-items: center;
          }

          .form-control {
            border: 1px solid #ced4da;
            border-radius: 4px;
            padding: 0.25rem 0.5rem;
            font-size: 0.875rem;
            min-height: 32px;
          }

          .btn {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            padding: 0.25rem 0.75rem;
            border-radius: 4px;
            font-weight: 500;
            transition: all 0.3s ease;
            font-size: 0.875rem;
          }

          .btn-success {
            background: linear-gradient(45deg, #28a745, #20c997);
            border: none;
          }

          .btn-primary {
            background: linear-gradient(45deg, #007bff, #0056b3);
            border: none;
          }

          .btn-secondary {
            background: linear-gradient(45deg, #6c757d, #5a6268);
            border: none;
          }

          .btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);
          }

          .search-button {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            width: 32px;
            padding: 0;
            border-radius: 0 4px 4px 0;
          }

          .popup {
            position: absolute;
            z-index: 1000;
            background: white;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            padding: 10px;
            margin-top: 5px;
            max-height: 200px;
            overflow-y: auto;
            width: 100%;
            max-width: 600px;
          }

          .modal-header {
            background: linear-gradient(45deg, #007bff, #0056b3);
            color: white;
            padding: 0.5rem 1rem;
          }

          .mb-4 {
            margin-bottom: 0.75rem !important;
          }

          .mb-3 {
            margin-bottom: 0.5rem !important;
          }

          .me-2 {
            margin-right: 0.375rem !important;
          }

          .table {
            font-size: 0.875rem;
          }

          .table thead th {
            background: #f8f9fa;
            color: #495057;
            font-weight: 500;
            padding: 0.5rem;
            border-bottom: 2px solid #dee2e6;
            white-space: nowrap;
          }

          .table tbody td {
            padding: 0.5rem;
            vertical-align: middle;
          }

          .table tbody tr:hover {
            background-color: #f8f9fa;
            cursor: pointer;
          }

          .table.table-sm td, 
          .table.table-sm th {
            padding: 0.25rem 0.5rem;
          }

          .input-group {
            min-height: 32px;
          }

          .input-group .form-control {
            height: 32px;
          }
        `}
      </style>
    </React.Fragment>
  );
};

export default FormsElements;
