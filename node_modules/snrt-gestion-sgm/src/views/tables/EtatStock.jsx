import React, { useState } from 'react';
import { Row, Col, Card, Table, Form, Button, InputGroup } from 'react-bootstrap';
import { FaSearch, FaFileExcel, FaPrint, FaClipboardList, FaBoxOpen } from 'react-icons/fa';

const EtatStock = () => {
  const [searchKeyword, setSearchKeyword] = useState('');
  const [selectedMarche, setSelectedMarche] = useState('');
  const [selectedMarcheDesc, setSelectedMarcheDesc] = useState('');
  const [selectedArticle, setSelectedArticle] = useState('');
  const [selectedArticleDesc, setSelectedArticleDesc] = useState('');
  const [showMarchePopup, setShowMarchePopup] = useState(false);
  const [showArticlePopup, setShowArticlePopup] = useState(false);
  const [marcheFilterText, setMarcheFilterText] = useState('');
  const [articleFilterText, setArticleFilterText] = useState('');
  const [selectedRow, setSelectedRow] = useState(null);
  const [filteredTableData, setFilteredTableData] = useState([]);
  const [isFiltered, setIsFiltered] = useState(false);

  // Static data for demonstration
  const marcheData = [
    { idproj: 'M001', descritionproj: 'Project A', nomfamilleproj: 'Family A', dateProj: '2024-01-01', nomfrs: 'Supplier A', memoproj: 'Memo A' },
    { idproj: 'M002', descritionproj: 'Project B', nomfamilleproj: 'Family B', dateProj: '2024-02-01', nomfrs: 'Supplier B', memoproj: 'Memo B' },
    { idproj: 'M003', descritionproj: 'Project C', nomfamilleproj: 'Family C', dateProj: '2024-03-01', nomfrs: 'Supplier C', memoproj: 'Memo C' },
  ];

  const articleData = [
    { code: 'A001', designation: 'Article A', famille: 'Family A', marque: 'Brand A', ref: 'REF001', codeExt: 'EXT001', serialisable: 'Yes', rayon: 'R1', stock_min: 10, stock_max: 100, designation_long: 'Long Description A', photo: 'photo1.jpg' },
    { code: 'A002', designation: 'Article B', famille: 'Family B', marque: 'Brand B', ref: 'REF002', codeExt: 'EXT002', serialisable: 'No', rayon: 'R2', stock_min: 20, stock_max: 200, designation_long: 'Long Description B', photo: 'photo2.jpg' },
    { code: 'A003', designation: 'Article C', famille: 'Family C', marque: 'Brand C', ref: 'REF003', codeExt: 'EXT003', serialisable: 'Yes', rayon: 'R3', stock_min: 30, stock_max: 300, designation_long: 'Long Description C', photo: 'photo3.jpg' },
  ];

  const tableData = [
    { numReception: 'REC001', marche: 'M001', dateEnt: '2024-01-15', fournisseur: 'Supplier A', codeProd: 'A001', ref: 'REF001', designation: 'Article A', qte_ent: 50, qte_sol_mouv: 20, qte_stock: 30 },
    { numReception: 'REC002', marche: 'M002', dateEnt: '2024-02-15', fournisseur: 'Supplier B', codeProd: 'A002', ref: 'REF002', designation: 'Article B', qte_ent: 100, qte_sol_mouv: 40, qte_stock: 60 },
    { numReception: 'REC003', marche: 'M003', dateEnt: '2024-03-15', fournisseur: 'Supplier C', codeProd: 'A003', ref: 'REF003', designation: 'Article C', qte_ent: 150, qte_sol_mouv: 60, qte_stock: 90 },
  ];

  const filteredMarcheData = marcheData.filter(item =>
    Object.values(item).some(val =>
      String(val).toLowerCase().includes(marcheFilterText.toLowerCase())
    )
  );

  const filteredArticleData = articleData.filter(item =>
    Object.values(item).some(val =>
      String(val).toLowerCase().includes(articleFilterText.toLowerCase())
    )
  );

  const handleSearchChange = (e) => {
    setSearchKeyword(e.target.value);
  };

  const toggleMarchePopup = () => {
    setShowMarchePopup(!showMarchePopup);
  };

  const toggleArticlePopup = () => {
    setShowArticlePopup(!showArticlePopup);
  };

  const handleSearch = () => {
    let filtered = [...tableData];
    
    if (selectedMarche) {
      filtered = filtered.filter(item => item.marche === selectedMarche);
    }
    
    if (selectedArticle) {
      filtered = filtered.filter(item => item.codeProd === selectedArticle);
    }
    
    setFilteredTableData(filtered);
    setIsFiltered(true);
  };

  const handleExportExcel = () => {
    // Préparer les données
    const data = (isFiltered ? filteredTableData : tableData);
    
    // Définir les en-têtes
    const headers = [
      "NumReception",
      "Marché",
      "DateEnt",
      "Fournisseur",
      "CodeProd",
      "Réf",
      "Designation",
      "Qte_ent",
      "Qte_Sol_mouv",
      "Qte_Stock"
    ];

    // Formater les données
    const formatData = (value) => {
      if (value === null || value === undefined) return '';
      // Gérer les valeurs avec des points-virgules ou retours à la ligne
      if (typeof value === 'string' && (value.includes(';') || value.includes('\n') || value.includes('"'))) {
        return `"${value.replace(/"/g, '""')}"`;
      }
      return value;
    };

    // Ajouter le BOM pour Excel
    const BOM = '\uFEFF';
    
    // Convertir les données en format CSV
    const csvContent = BOM + [
      headers.join(';'),
      ...data.map(row => [
        formatData(row.numReception),
        formatData(row.marche),
        formatData(row.dateEnt),
        formatData(row.fournisseur),
        formatData(row.codeProd),
        formatData(row.ref),
        formatData(row.designation),
        formatData(row.qte_ent),
        formatData(row.qte_sol_mouv),
        formatData(row.qte_stock)
      ].join(';'))
    ].join('\r\n');

    // Créer le Blob avec l'encodage UTF-8
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8' });
    const link = document.createElement("a");
    const url = URL.createObjectURL(blob);
    
    // Générer le nom du fichier
    const date = new Date();
    const fileName = `etat_stock_${date.getFullYear()}${String(date.getMonth() + 1).padStart(2, '0')}${String(date.getDate()).padStart(2, '0')}.csv`;
    
    // Déclencher le téléchargement
    link.setAttribute("href", url);
    link.setAttribute("download", fileName);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  return (
    <React.Fragment>
      <Row>
        <Col>
          <Card>
            <Card.Header>
              <div className="d-flex justify-content-between align-items-center">
                <div>
                  <Button 
                    variant="primary" 
                    className="me-2 action-button" 
                    style={{ background: 'linear-gradient(45deg, #007bff, #0056b3)' }}
                    onClick={handleSearch}
                  >
                    <FaSearch className="me-2" /> Rechercher
                  </Button>
                  <Button 
                    variant="success" 
                    className="me-2 action-button" 
                    style={{ background: 'linear-gradient(45deg, #28a745, #20c997)' }}
                    onClick={handleExportExcel}
                  >
                    <FaFileExcel className="me-2" /> Export Excel
                  </Button>
                </div>
                <div>
                  <Button variant="info" className="action-button" style={{ background: 'linear-gradient(45deg, #17a2b8, #138496)' }}>
                    <FaPrint className="me-2" /> Imprimer
                  </Button>
                </div>
              </div>
            </Card.Header>
            <Card.Body>
              <Row className="mb-3">
                <Col md={12}>
                  {/* Marché section */}
                  <Row className="mb-4">
                    <Col md={4}>
                      <Form.Group>
                        <Form.Label><FaClipboardList className="me-2" />Marché</Form.Label>
                        <InputGroup>
                          <Form.Control type="text" value={selectedMarche} readOnly />
                          <Button variant="secondary" className="search-button" onClick={toggleMarchePopup}>
                            <FaSearch />
                          </Button>
                        </InputGroup>
                        {showMarchePopup && (
                          <div className="popup">
                            <Form.Control
                              type="text"
                              placeholder="Rechercher..."
                              value={marcheFilterText}
                              onChange={(e) => setMarcheFilterText(e.target.value)}
                              className="mb-2"
                            />
                            <Table striped bordered hover size="sm">
                              <thead>
                                <tr>
                                  <th>Idproj</th>
                                  <th>Descritionproj</th>
                                  <th>Nomfamilleproj</th>
                                  <th>Date Proj</th>
                                  <th>Nomfrs</th>
                                  <th>Memoproj</th>
                                </tr>
                              </thead>
                              <tbody>
                                {filteredMarcheData.map((row, index) => (
                                  <tr key={index} onClick={() => {
                                    setSelectedMarche(row.idproj);
                                    setSelectedMarcheDesc(row.descritionproj);
                                    setShowMarchePopup(false);
                                  }}>
                                    <td>{row.idproj}</td>
                                    <td>{row.descritionproj}</td>
                                    <td>{row.nomfamilleproj}</td>
                                    <td>{row.dateProj}</td>
                                    <td>{row.nomfrs}</td>
                                    <td>{row.memoproj}</td>
                                  </tr>
                                ))}
                              </tbody>
                            </Table>
                          </div>
                        )}
                      </Form.Group>
                    </Col>
                    <Col md={8}>
                      <Form.Group>
                        <Form.Control type="text" value={selectedMarcheDesc} readOnly style={{ marginTop: '32px' }} />
                      </Form.Group>
                    </Col>
                  </Row>

                  {/* Article section */}
                  <Row className="mb-4">
                    <Col md={4}>
                      <Form.Group>
                        <Form.Label><FaBoxOpen className="me-2" />Article</Form.Label>
                        <InputGroup>
                          <Form.Control type="text" value={selectedArticle} readOnly />
                          <Button variant="secondary" className="search-button" onClick={toggleArticlePopup}>
                            <FaSearch />
                          </Button>
                        </InputGroup>
                        {showArticlePopup && (
                          <div className="popup">
                            <Form.Control
                              type="text"
                              placeholder="Rechercher..."
                              value={articleFilterText}
                              onChange={(e) => setArticleFilterText(e.target.value)}
                              className="mb-2"
                            />
                            <Table striped bordered hover size="sm">
                              <thead>
                                <tr>
                                  <th>Code</th>
                                  <th>Designation</th>
                                  <th>Famille</th>
                                  <th>Marque</th>
                                  <th>Ref</th>
                                  <th>Code Ext</th>
                                  <th>Serialisable</th>
                                  <th>Rayon</th>
                                  <th>Stock Min</th>
                                  <th>Stock Max</th>
                                  <th>Designation Long</th>
                                  <th>Photo</th>
                                </tr>
                              </thead>
                              <tbody>
                                {filteredArticleData.map((row, index) => (
                                  <tr key={index} onClick={() => {
                                    setSelectedArticle(row.code);
                                    setSelectedArticleDesc(row.designation);
                                    setShowArticlePopup(false);
                                  }}>
                                    <td>{row.code}</td>
                                    <td>{row.designation}</td>
                                    <td>{row.famille}</td>
                                    <td>{row.marque}</td>
                                    <td>{row.ref}</td>
                                    <td>{row.codeExt}</td>
                                    <td>{row.serialisable}</td>
                                    <td>{row.rayon}</td>
                                    <td>{row.stock_min}</td>
                                    <td>{row.stock_max}</td>
                                    <td>{row.designation_long}</td>
                                    <td>{row.photo}</td>
                                  </tr>
                                ))}
                              </tbody>
                            </Table>
                          </div>
                        )}
                      </Form.Group>
                    </Col>
                    <Col md={8}>
                      <Form.Group>
                        <Form.Control type="text" value={selectedArticleDesc} readOnly style={{ marginTop: '32px' }} />
                      </Form.Group>
                    </Col>
                  </Row>
                </Col>
              </Row>

              <div style={{ overflowX: 'auto' }}>
                <Table hover responsive>
                  <thead>
                    <tr>
                      <th>NumReception</th>
                      <th>Marche</th>
                      <th>DateEnt</th>
                      <th>Fournisseur</th>
                      <th>CodeProd</th>
                      <th>Ref</th>
                      <th>Designation</th>
                      <th>Qte_ent</th>
                      <th>Qte_Sol_mouv</th>
                      <th>Qte_Stock</th>
                    </tr>
                  </thead>
                  <tbody>
                    {(isFiltered ? filteredTableData : tableData).map((row, index) => (
                      <tr
                        key={index}
                        onClick={() => setSelectedRow(index)}
                        style={{
                          ...(selectedRow === index ? {
                            backgroundColor: '#0d6efd',
                            color: '#ff69b4'
                          } : {})
                        }}
                      >
                        <td style={{
                          color: selectedRow === index ? '#ff69b4' : 'inherit'
                        }}>{row.numReception}</td>
                        <td style={{
                          color: selectedRow === index ? '#ff69b4' : 'inherit'
                        }}>{row.marche}</td>
                        <td style={{
                          color: selectedRow === index ? '#ff69b4' : 'inherit'
                        }}>{row.dateEnt}</td>
                        <td style={{
                          color: selectedRow === index ? '#ff69b4' : 'inherit'
                        }}>{row.fournisseur}</td>
                        <td style={{
                          color: selectedRow === index ? '#ff69b4' : 'inherit'
                        }}>{row.codeProd}</td>
                        <td style={{
                          color: selectedRow === index ? '#ff69b4' : 'inherit'
                        }}>{row.ref}</td>
                        <td style={{
                          color: selectedRow === index ? '#ff69b4' : 'inherit'
                        }}>{row.designation}</td>
                        <td style={{
                          color: selectedRow === index ? '#ff69b4' : 'inherit'
                        }}>{row.qte_ent}</td>
                        <td style={{
                          color: selectedRow === index ? '#ff69b4' : 'inherit'
                        }}>{row.qte_sol_mouv}</td>
                        <td style={{
                          color: selectedRow === index ? '#ff69b4' : 'inherit'
                        }}>{row.qte_stock}</td>
                      </tr>
                    ))}
                  </tbody>
                </Table>
              </div>
            </Card.Body>
          </Card>
        </Col>
      </Row>

      <style>
        {`
          .card {
            background: white;
            border-radius: 4px;
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
            margin-bottom: 0.5rem;
          }

          .card-header {
            background: #f8f9fa;
            border-bottom: 1px solid #e9ecef;
            padding: 0.5rem 1rem;
          }

          .card-body {
            padding: 0.75rem;
          }

          .action-button {
            display: inline-flex;
            align-items: center;
            padding: 0.25rem 0.75rem;
            border-radius: 4px;
            font-weight: 500;
            font-size: 0.875rem;
            transition: all 0.2s ease;
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
            margin-right: 0.5rem;
          }

          .action-button:hover {
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);
          }

          .search-button {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            width: 32px;
            padding: 0;
            border-radius: 0 4px 4px 0;
          }

          .popup {
            position: absolute;
            z-index: 1000;
            background: white;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            padding: 0.5rem;
            margin-top: 2px;
            max-height: 300px;
            overflow-y: auto;
            width: 95%;
          }

          .form-label {
            color: #495057;
            font-weight: 500;
            margin-bottom: 0.25rem;
            font-size: 0.875rem;
            display: flex;
            align-items: center;
          }

          .form-control {
            padding: 0.25rem 0.5rem;
            font-size: 0.875rem;
            min-height: 32px;
          }

          .mb-4 {
            margin-bottom: 0.75rem !important;
          }

          .mb-3 {
            margin-bottom: 0.5rem !important;
          }

          .me-2 {
            margin-right: 0.375rem !important;
          }

          .table {
            font-size: 0.875rem;
          }

          .table thead th {
            background: #f8f9fa;
            color: #495057;
            font-weight: 600;
            padding: 0.5rem;
            border-bottom: 2px solid #dee2e6;
            white-space: nowrap;
          }

          .table tbody td {
            padding: 0.5rem;
            vertical-align: middle;
          }

          .table tbody tr:hover {
            background-color: #f8f9fa;
            cursor: pointer;
          }

          .table.table-sm td, 
          .table.table-sm th {
            padding: 0.25rem 0.5rem;
          }

          .input-group {
            min-height: 32px;
          }

          .input-group .form-control {
            height: 32px;
          }
        `}
      </style>
    </React.Fragment>
  );
};

export default EtatStock;
